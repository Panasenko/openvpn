package vpn;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

public class VPN extends javax.swing.JFrame {

    private static final String CONF_FILE_EXTENSION = "conf";
    private static final String TMP_FILE_NAME = "tmp_file.tvpn";
    private static String AUTH_FILE_NAME = "auth_file.avpn";
    private static final String CONF_FILE_DESCRIPTION = "Файлы конфигураций";

    private static final String INPUT_LDAP_NAME = "Введите логин";
    private static final String INPUT_PASS_NAME = "Пароль";
    private static final String EMPTY_STRING = "";

    private boolean checkBoxState = false;
    private DataConnect connectData;
    private ConnectVPN connectVPN;

    private FileFilter confFilter = new ConfigFileFilter(CONF_FILE_EXTENSION, CONF_FILE_DESCRIPTION);

    public VPN() {
        initComponents();
        initPanel();
        this.connectData = new DataConnect();
        initStartAuthData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SaveData = new javax.swing.JCheckBox();
        FileChooser = new javax.swing.JFileChooser();
        addConfiguration = new javax.swing.JPanel();
        txtAddConfiguration = new javax.swing.JTextField();
        btnAddConfiguration = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addClientData = new javax.swing.JPanel();
        txtLdapLogin = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        chboxSaveData = new javax.swing.JCheckBox();
        btnConnect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        SaveData.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addConfiguration.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        txtAddConfiguration.setEditable(false);
        txtAddConfiguration.setText("Address settings");
        txtAddConfiguration.setToolTipText("Адрес к конфигурационному файлу");
        txtAddConfiguration.setActionCommand("<Not Set>");

        btnAddConfiguration.setText("Add Settings");
        btnAddConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddConfigurationActionPerformed(evt);
            }
        });

        jLabel1.setText("Connect to OpenVPN");

        javax.swing.GroupLayout addConfigurationLayout = new javax.swing.GroupLayout(addConfiguration);
        addConfiguration.setLayout(addConfigurationLayout);
        addConfigurationLayout.setHorizontalGroup(
            addConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtAddConfiguration, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addConfigurationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(121, 121, 121))
        );
        addConfigurationLayout.setVerticalGroup(
            addConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addConfigurationLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddConfiguration)
                    .addComponent(btnAddConfiguration))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        txtLdapLogin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLdapLoginFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLdapLoginFocusLost(evt);
            }
        });

        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });

        chboxSaveData.setText("Save connection data  ");
        chboxSaveData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chboxSaveDataItemStateChanged(evt);
            }
        });

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jLabel2.setText("Ldap password:");

        jLabel3.setText("Ldap login:");

        javax.swing.GroupLayout addClientDataLayout = new javax.swing.GroupLayout(addClientData);
        addClientData.setLayout(addClientDataLayout);
        addClientDataLayout.setHorizontalGroup(
            addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addClientDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addClientDataLayout.createSequentialGroup()
                        .addComponent(chboxSaveData, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addClientDataLayout.createSequentialGroup()
                        .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addClientDataLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel3))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassword)
                            .addComponent(txtLdapLogin))
                        .addContainerGap())))
        );
        addClientDataLayout.setVerticalGroup(
            addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addClientDataLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLdapLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(addClientDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chboxSaveData)
                    .addComponent(btnConnect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addConfiguration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(addClientData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addClientData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initPanel() {
        txtLdapLogin.setText(INPUT_LDAP_NAME);
        txtPassword.setText(INPUT_PASS_NAME);
        FileChooser.setCurrentDirectory(new File("/etc/openvpn/client"));
    }

    private void initStartAuthData() {

        File[] file = FileUtils.finder(FileUtils.getCanonicalPath(), AUTH_FILE_NAME);

        if (file != null && file.length > 0) {
            try {
                Object ob = FileUtils.deserialize(file[0].getCanonicalPath());
                DataConnect dc = (DataConnect) ob;

                String path = dc.getPathConfFile();
                txtAddConfiguration.setText(path);
                connectData.setPathConfFile(path);

                String ldap = dc.getLogin();
                txtLdapLogin.setText(ldap);
                connectData.setLogin(ldap);
                
                String pass = dc.getPassword();
                txtPassword.setText(pass);
                connectData.setPassword(pass);
                
                
                System.out.println(path);
                System.out.println(ldap);
                System.out.println(pass);
                
            } catch (IOException ex) {
                Logger.getLogger(VPN.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void btnAddConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddConfigurationActionPerformed
        FileUtils.addFileFilter(FileChooser, confFilter);
        int result = FileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File confFile = FileChooser.getSelectedFile();

            String path = confFile.getPath();
            connectData.setPathConfFile(path);
            txtAddConfiguration.setText(path);
        }
    }//GEN-LAST:event_btnAddConfigurationActionPerformed

    private void txtLdapLoginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLdapLoginFocusGained
        if (txtLdapLogin.getText().equals(INPUT_LDAP_NAME)) {
            txtLdapLogin.setText(EMPTY_STRING);
        }
    }//GEN-LAST:event_txtLdapLoginFocusGained

    private void txtLdapLoginFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLdapLoginFocusLost

        String login = txtLdapLogin.getText().trim();

        if (login.equals(EMPTY_STRING)) {
            txtLdapLogin.setText(INPUT_LDAP_NAME);
        } else {
            if (login.length() > 10) {
                connectData.setLogin(login);
            } else {
                JOptionPane.showMessageDialog(this, "Ошибка! Логин не может содержать меньше 11 символов!");
            }
        }
    }//GEN-LAST:event_txtLdapLoginFocusLost

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        if (new String(txtPassword.getPassword()).equals(INPUT_PASS_NAME)) {
            txtPassword.setText(EMPTY_STRING);
        }
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusLost

        String strPass = new String(txtPassword.getPassword());

        if (strPass.equals(EMPTY_STRING)) {
            txtPassword.setText(INPUT_PASS_NAME);
        } else {
            if (strPass.length() > 4) {
                connectData.setPassword(strPass);
            } else {
                JOptionPane.showMessageDialog(this, "Ошибка! Пароль не может содержать меньше 4х символов!");
            }
        }
    }//GEN-LAST:event_txtPasswordFocusLost

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed

        if (btnConnect.getText().equals("Connect")) {
            if (connectData.getLogin() == null || connectData.getPathConfFile() == null || connectData.getPassword() == null) {
                JOptionPane.showMessageDialog(this, "Ошибка! Не введены обязательные параметры для подключения!");
            } else {

                String otp = JOptionPane.showInputDialog(this, "Введите ОТП-пароль");

                if (otp.length() > 5 && otp != null) {
                    connectVPN = new ConnectVPN(TMP_FILE_NAME, connectData, otp);
                    connectVPN.start();

                    if (checkBoxState) {
                        FileUtils.serializable(connectData, FileUtils.getCanonicalPath() + "/" + AUTH_FILE_NAME);
                    }

                    btnConnect.setText("Disconnect");

                }

            }
        } else {
            connectVPN.disconnect();
            btnConnect.setText("Connect");
        }

    }//GEN-LAST:event_btnConnectActionPerformed

    private void chboxSaveDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chboxSaveDataItemStateChanged
        if (evt.getStateChange() == 1) {
            checkBoxState = true;
        } else {
            checkBoxState = false;
        }
    }//GEN-LAST:event_chboxSaveDataItemStateChanged

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VPN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JCheckBox SaveData;
    private javax.swing.JPanel addClientData;
    private javax.swing.JPanel addConfiguration;
    private javax.swing.JButton btnAddConfiguration;
    private javax.swing.JButton btnConnect;
    private javax.swing.JCheckBox chboxSaveData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtAddConfiguration;
    private javax.swing.JTextField txtLdapLogin;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
